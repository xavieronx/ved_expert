import os
import telebot
from ved_router import route_message
from wed_expert_genspark_integration import GensparktWEDAgent, ProductClassification

BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
bot = telebot.TeleBot(BOT_TOKEN)
genspark_agent = GensparktWEDAgent()

@bot.message_handler(commands=['start', 'help'])
def send_welcome(message):
    bot.reply_to(message, "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –Ø ‚Äî –í–≠–î –≠–∫—Å–ø–µ—Ä—Ç —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π Genspark AI.\n\n–ö–æ–º–∞–Ω–¥—ã:\n/start - –Ω–∞—á–∞–ª–æ\n/genspark - AI –∞–Ω–∞–ª–∏–∑\n\n–ò–ª–∏ –ø—Ä–æ—Å—Ç–æ –∑–∞–¥–∞–≤–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å—ã!")

@bot.message_handler(commands=['genspark'])
def genspark_classify(message):
    bot.reply_to(message, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —á–µ—Ä–µ–∑ Genspark AI\n–ü—Ä–∏–º–µ—Ä: –∫–æ—Ñ–µ–º–∞—à–∏–Ω–∞ DeLonghi")

@bot.message_handler(func=lambda message: True)
def handle_all_messages(message):
    user_input = message.text
    
    try:
        # –ï—Å–ª–∏ —É–ø–æ–º–∏–Ω–∞–µ—Ç—Å—è genspark –∏–ª–∏ AI - –∏—Å–ø–æ–ª—å–∑—É–µ–º Genspark
        if any(word in user_input.lower() for word in ['genspark', 'ai', '–∫–æ—Ñ–µ–º–∞—à–∏–Ω–∞', '—Å–º–∞—Ä—Ç—Ñ–æ–Ω']):
            
            if "–∫–æ—Ñ–µ" in user_input.lower():
                product = ProductClassification(
                    name="–ö–æ—Ñ–µ–º–∞—à–∏–Ω–∞", 
                    material="–º–µ—Ç–∞–ª–ª, –ø–ª–∞—Å—Ç–∏–∫",
                    function="–ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ –∫–æ—Ñ–µ", 
                    processing_level="–≥–æ—Ç–æ–≤–æ–µ –∏–∑–¥–µ–ª–∏–µ",
                    origin_country="IT", 
                    value=25000.0
                )
            elif "—Ç–µ–ª–µ—Ñ–æ–Ω" in user_input.lower() or "—Å–º–∞—Ä—Ç—Ñ–æ–Ω" in user_input.lower():
                product = ProductClassification(
                    name="–°–º–∞—Ä—Ç—Ñ–æ–Ω", 
                    material="–∞–ª—é–º–∏–Ω–∏–π, —Å—Ç–µ–∫–ª–æ",
                    function="–º–æ–±–∏–ª—å–Ω–∞—è —Å–≤—è–∑—å", 
                    processing_level="–≥–æ—Ç–æ–≤–æ–µ –∏–∑–¥–µ–ª–∏–µ",
                    origin_country="CN", 
                    value=120000.0
                )
            else:
                bot.reply_to(message, "ü§ñ –£–∫–∞–∂–∏—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Ç–æ–≤–∞—Ä: –∫–æ—Ñ–µ–º–∞—à–∏–Ω–∞, —Å–º–∞—Ä—Ç—Ñ–æ–Ω")
                return
            
            result = genspark_agent.determine_tn_ved(product)
            cost_calc = genspark_agent.calculate_total_cost(result, product.value)
            
            response = f"""ü§ñ –ê–Ω–∞–ª–∏–∑ Genspark AI:

üì¶ –¢–æ–≤–∞—Ä: {product.name}
üéØ –ö–æ–¥ –¢–ù –í–≠–î: {result.code}
üí∞ –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {cost_calc['total_cost']:,.0f} —Ä—É–±
üí∏ –ö –¥–æ–ø–ª–∞—Ç–µ: {cost_calc['total_taxes']:,.0f} —Ä—É–±

‚ö° Powered by Genspark"""
            
            bot.reply_to(message, response)
            
        else:
            # –û–±—ã—á–Ω–∞—è –ª–æ–≥–∏–∫–∞ —á–µ—Ä–µ–∑ RAG
            response = route_message(user_input)
            bot.reply_to(message, response)
            
    except Exception as e:
        bot.reply_to(message, f"–û—à–∏–±–∫–∞: {str(e)}")

if __name__ == "__main__":
    bot.infinity_polling()
