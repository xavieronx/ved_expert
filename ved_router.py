import json
import os

# Modified route_message function to use VEDDatabase instead of RAG API
def route_message(text, ved_db=None):
    try:
        # Check if text contains a valid TN VED code
        if ved_db and any(c.isdigit() for c in text):
            # Try to find tn_ved code in text
            result = ved_db.search_product(text)

            if result:
                code_info = result.get('product')
                if not code_info:
                    return f"‚ùå –ö–æ–¥ –¢–ù –í–≠–î –Ω–µ –Ω–∞–π–¥–µ–Ω: {text}"

                blocks = []

                # Format product info
                title = f"üìä *–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–≤–∞—Ä–µ:* {code_info.get('name', '–ù/–î')}"
                code_block = f"üìå –ö–æ–¥ –¢–ù –í–≠–î: {code_info.get('code', '–ù/–î')}"
                desc_block = f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {code_info.get('description', '–ù/–î')}"
                group_block = f"üîç –ì—Ä—É–ø–ø–∞: {code_info.get('group', '–ù/–î')}"

                blocks.append(title)
                blocks.append(code_block)
                blocks.append(desc_block)
                blocks.append(group_block)

                # Add duties info
                duties = code_info.get('duties', {})
                if duties:
                    duties_text = f"üí∞ *–ü–æ—à–ª–∏–Ω—ã:*\n- –ë–∞–∑–æ–≤–∞—è: {duties.get('base', '–ù/–î')}%"
                    for country, rate in duties.items():
                        if country != 'base':
                            duties_text += f"\n- {country.capitalize()}: {rate}%"
                    blocks.append(duties_text)

                # Add certification
                cert = code_info.get('certification', [])
                if cert:
                    cert_text = f"üìÑ *–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏:*\n- " + "\n- ".join(cert)
                    blocks.append(cert_text)

                # Add restrictions
                restrictions = code_info.get('restrictions', [])
                if restrictions:
                    rest_text = f"‚ö†Ô∏è *–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:*\n- " + "\n- ".join(restrictions)
                    blocks.append(rest_text)
                else:
                    blocks.append("‚úÖ *–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:* –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç")

                return "\n\n".join(blocks)

        # Fallback to simple response
        return f"üß† –ó–∞–ø—Ä–æ—Å –æ–±—Ä–∞–±–æ—Ç–∞–Ω: {text}\n\n–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ —É–∫–∞–∂–∏—Ç–µ –∫–æ–¥ –¢–ù –í–≠–î –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞."

    except Exception as e:
        return f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞: {e}"
