import json
import os
import re
import logging
from datetime import datetime
from typing import Dict, List, Optional

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger('VED_ROUTER')

# –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤
request_stats = {
    'total_requests': 0,
    'code_searches': 0,
    'name_searches': 0,
    'ai_requests': 0,
    'popular_codes': {}
}

def format_product_info(product: Dict) -> str:
    """–ö—Ä–∞—Å–∏–≤–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ–≤–∞—Ä–µ"""
    try:
        code = product.get('code', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
        name = product.get('name', '–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ')
        description = product.get('description', '')
        group = product.get('group', '')
        duties = product.get('duties', {})
        certification = product.get('certification', [])
        restrictions = product.get('restrictions', [])
        
        # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        result = f"üè∑Ô∏è *{name}*\n"
        result += f"üìã –ö–æ–¥ –¢–ù –í–≠–î: `{code}`\n"
        if description:
            result += f"üìù {description}\n"
        result += f"üîç –ì—Ä—É–ø–ø–∞: {group}\n\n"
        
        # –ü–æ—à–ª–∏–Ω—ã —Å —ç–º–æ–¥–∑–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–Ω–∏–º–∞–Ω–∏—è
        result += f"üí∞ *–ü–æ—à–ª–∏–Ω—ã:*\n"
        base_rate = duties.get('base', 0)
        result += f"‚Ä¢ –ë–∞–∑–æ–≤–∞—è —Å—Ç–∞–≤–∫–∞: {base_rate}% {get_rate_emoji(base_rate)}\n"
        
        china_rate = duties.get('china', 0)
        result += f"‚Ä¢ –ö–∏—Ç–∞–π: {china_rate}% {get_rate_emoji(china_rate)}\n"
        
        eu_rate = duties.get('eu', 0)
        result += f"‚Ä¢ –ï–°: {eu_rate}% {get_rate_emoji(eu_rate)}\n"
        
        usa_rate = duties.get('usa', 0)
        result += f"‚Ä¢ –°–®–ê: {usa_rate}% {get_rate_emoji(usa_rate)}\n"
        
        result += f"‚Ä¢ –ë–µ–ª–∞—Ä—É—Å—å: {duties.get('belarus', 0)}% üÜì\n"
        result += f"‚Ä¢ –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω: {duties.get('kazakhstan', 0)}% üÜì\n\n"
        
        # –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
        if certification:
            result += f"üìú *–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è:*\n"
            for cert in certification:
                result += f"‚Ä¢ {cert} {get_cert_emoji(cert)}\n"
            result += "\n"
        
        # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
        if restrictions:
            result += f"‚ö†Ô∏è *–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:*\n"
            for restriction in restrictions:
                result += f"‚Ä¢ {restriction}\n"
            result += "\n"
        else:
            result += f"‚úÖ *–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:* –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç\n\n"
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        result += f"ü§ñ –•–æ—Ç–∏—Ç–µ AI-–∞–Ω–∞–ª–∏–∑? –ù–∞–ø–∏—à–∏—Ç–µ: `–∞–Ω–∞–ª–∏–∑ {code}`\n"
        result += f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: –∫–æ–¥ –∑–∞–ø—Ä–∞—à–∏–≤–∞–ª—Å—è {request_stats['popular_codes'].get(code, 0)} —Ä–∞–∑"
        
        return result
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        return f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ–≤–∞—Ä–µ"

def get_rate_emoji(rate: float) -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —ç–º–æ–¥–∑–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞–≤–∫–∏ –ø–æ—à–ª–∏–Ω—ã"""
    if rate == 0:
        return "üÜì"
    elif rate <= 5:
        return "üíö"
    elif rate <= 15:
        return "üíõ"
    elif rate <= 25:
        return "üß°"
    else:
        return "üî¥"

def get_cert_emoji(cert: str) -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —ç–º–æ–¥–∑–∏ –¥–ª—è —Ç–∏–ø–∞ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
    cert_lower = cert.lower()
    if "—Ç—Ä —Ç—Å" in cert_lower:
        return "üõ°Ô∏è"
    elif "—Å—ç—Å" in cert_lower:
        return "ü©∫"
    elif "–≤–µ—Ç–µ—Ä–∏–Ω–∞—Ä–Ω–æ–µ" in cert_lower:
        return "üêæ"
    elif "—Ñ–∏—Ç–æ—Å–∞–Ω–∏—Ç–∞—Ä–Ω–æ–µ" in cert_lower:
        return "üå±"
    else:
        return "üìã"

def improved_search(query: str, ved_db) -> Optional[str]:
    """–£–ª—É—á—à–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫ —Å –Ω–µ—á–µ—Ç–∫–∏–º–∏ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è–º–∏"""
    try:
        query_lower = query.lower().strip()
        
        # –ü–æ–∏—Å–∫ –ø–æ –∫–æ–¥—É –¢–ù –í–≠–î
        tnved_pattern = r'\b\d{10}\b'
        tnved_match = re.search(tnved_pattern, query)
        if tnved_match:
            return handle_code_search(tnved_match.group(), ved_db)
        
        # –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
        keywords = {
            # –≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞
            '–Ω–æ—É—Ç–±—É–∫': ['8471300000'],
            '—Å–º–∞—Ä—Ç—Ñ–æ–Ω': ['8517120000'],
            '—Ç–µ–ª–µ—Ñ–æ–Ω': ['8517120000'],
            '—Ç–µ–ª–µ–≤–∏–∑–æ—Ä': ['8528720000'],
            '–∫–æ–º–ø—å—é—Ç–µ—Ä': ['8471410000', '8471300000'],
            
            # –ê–≤—Ç–æ–º–æ–±–∏–ª–∏
            '–∞–≤—Ç–æ–º–æ–±–∏–ª—å': ['8703210000', '8703220000', '8703230000'],
            '–º–∞—à–∏–Ω–∞': ['8703210000', '8703220000', '8703230000'],
            '–∞–≤—Ç–æ': ['8703210000', '8703220000', '8703230000'],
            
            # –ü—Ä–æ–¥—É–∫—Ç—ã –ø–∏—Ç–∞–Ω–∏—è
            '–∫–æ—Ñ–µ': ['0901110000'],
            '–º–æ–ª–æ–∫–æ': ['0401100000'],
            '—Å–∞—Ö–∞—Ä': ['1701140000'],
            '–≤–æ–¥–∞': ['2202100000'],
            
            # –°—ã—Ä—å–µ
            '–Ω–µ—Ñ—Ç—å': ['2709000000'],
            '–ø–ª–∞—Å—Ç–∏–∫': ['3901100000'],
            '—Ä–µ–∑–∏–Ω–∞': ['4011100000'],
            
            # –õ–µ–∫–∞—Ä—Å—Ç–≤–∞
            '–ª–µ–∫–∞—Ä—Å—Ç–≤–æ': ['3004200000'],
            '–º–µ–¥–∏–∫–∞–º–µ–Ω—Ç': ['3004200000'],
            '–∞–Ω—Ç–∏–±–∏–æ—Ç–∏–∫': ['3004200000'],
        }
        
        # –ü–æ–∏—Å–∫ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
        for keyword, codes in keywords.items():
            if keyword in query_lower:
                return handle_multiple_codes(codes, ved_db, keyword)
        
        # –ü–æ–∏—Å–∫ –ø–æ —á–∞—Å—Ç–∏—á–Ω–æ–º—É —Å–æ–≤–ø–∞–¥–µ–Ω–∏—é –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏
        search_result = ved_db.search_product(query)
        if search_result and search_result.get('product'):
            return format_product_info(search_result['product'])
        
        return None
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {e}")
        return None

def handle_code_search(code: str, ved_db) -> str:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ –∫–æ–¥—É"""
    try:
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        request_stats['code_searches'] += 1
        request_stats['popular_codes'][code] = request_stats['popular_codes'].get(code, 0) + 1
        
        product = ved_db.get_product_by_code(code)
        if product:
            return format_product_info(product)
        else:
            return f"‚ùå –ö–æ–¥ –¢–ù –í–≠–î `{code}` –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.\n\nüí° *–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:*\n‚Ä¢ –ö–æ–¥ –≤–≤–µ–¥–µ–Ω –Ω–µ–≤–µ—Ä–Ω–æ\n‚Ä¢ –¢–æ–≤–∞—Ä –Ω–µ –≤–∫–ª—é—á–µ–Ω –≤ —Ç–µ–∫—É—â—É—é –±–∞–∑—É\n‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é —Ç–æ–≤–∞—Ä–∞"
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ –∫–æ–¥—É {code}: {e}")
        return f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∫–æ–¥–∞ {code}"

def handle_multiple_codes(codes: List[str], ved_db, keyword: str) -> str:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞"""
    try:
        results = []
        found_count = 0
        
        for code in codes:
            product = ved_db.get_product_by_code(code)
            if product:
                results.append(format_product_info(product))
                found_count += 1
        
        if results:
            header = f"üîç –ù–∞–π–¥–µ–Ω–æ {found_count} —Ç–æ–≤–∞—Ä(–æ–≤) –ø–æ –∑–∞–ø—Ä–æ—Å—É \"{keyword}\":\n\n"
            return header + "\n\n" + "‚îÄ" * 50 + "\n\n".join(results)
        else:
            return f"‚ùå –¢–æ–≤–∞—Ä—ã –ø–æ –∑–∞–ø—Ä–æ—Å—É \"{keyword}\" –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∫–æ–¥–æ–≤: {e}")
        return f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è \"{keyword}\""

def handle_ai_analysis(text: str, ved_db) -> Optional[str]:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ AI-–∞–Ω–∞–ª–∏–∑"""
    try:
        text_lower = text.lower()
        
        # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è AI-–∞–Ω–∞–ª–∏–∑–∞
        ai_patterns = [
            r'–∞–Ω–∞–ª–∏–∑\s+(\d{10})',
            r'ai\s+(\d{10})',
            r'–∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç\s+(\d{10})',
            r'–Ω–µ–π—Ä–æ—Å–µ—Ç—å\s+(\d{10})'
        ]
        
        for pattern in ai_patterns:
            match = re.search(pattern, text_lower)
            if match:
                code = match.group(1)
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                request_stats['ai_requests'] += 1
                
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ
                product = ved_db.get_product_by_code(code)
                if not product:
                    return f"‚ùå –ö–æ–¥ –¢–ù –í–≠–î `{code}` –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è AI-–∞–Ω–∞–ª–∏–∑–∞"
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º AI-–∞–Ω–∞–ª–∏–∑ (–ø–æ–∫–∞ –∑–∞–≥–ª—É—à–∫–∞)
                analysis = generate_ai_analysis(product)
                return f"üß† *AI-–∞–Ω–∞–ª–∏–∑ –¥–ª—è {code}:*\n\n{analysis}"
        
        return None
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ AI-–∞–Ω–∞–ª–∏–∑–∞: {e}")
        return None

def generate_ai_analysis(product: Dict) -> str:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è AI-–∞–Ω–∞–ª–∏–∑–∞ —Ç–æ–≤–∞—Ä–∞"""
    try:
        code = product.get('code')
        name = product.get('name')
        duties = product.get('duties', {})
        certification = product.get('certification', [])
        restrictions = product.get('restrictions', [])
        
        analysis = f"üìä *–ê–Ω–∞–ª–∏–∑ —Ç–æ–≤–∞—Ä–∞:* {name}\n\n"
        
        # –ê–Ω–∞–ª–∏–∑ –ø–æ—à–ª–∏–Ω
        base_rate = duties.get('base', 0)
        if base_rate == 0:
            analysis += "üíö *–ü–æ—à–ª–∏–Ω—ã:* –û—Ç–ª–∏—á–Ω–∞—è –Ω–æ–≤–æ—Å—Ç—å! –ë–∞–∑–æ–≤–∞—è —Å—Ç–∞–≤–∫–∞ 0% - —Ç–æ–≤–∞—Ä –Ω–µ –æ–±–ª–∞–≥–∞–µ—Ç—Å—è –ø–æ—à–ª–∏–Ω–æ–π.\n\n"
        elif base_rate <= 5:
            analysis += "üíõ *–ü–æ—à–ª–∏–Ω—ã:* –ù–∏–∑–∫–∞—è —Å—Ç–∞–≤–∫–∞ - –≤—ã–≥–æ–¥–Ω–æ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞.\n\n"
        elif base_rate <= 15:
            analysis += "üß° *–ü–æ—à–ª–∏–Ω—ã:* –°—Ä–µ–¥–Ω—è—è —Å—Ç–∞–≤–∫–∞ - —É—á–∏—Ç—ã–≤–∞–π—Ç–µ –≤ —Ä–∞—Å—á–µ—Ç–µ —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç–∏.\n\n"
        else:
            analysis += "üî¥ *–ü–æ—à–ª–∏–Ω—ã:* –í—ã—Å–æ–∫–∞—è —Å—Ç–∞–≤–∫–∞ - —Ä–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã.\n\n"
        
        # –ê–Ω–∞–ª–∏–∑ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
        if certification:
            analysis += "üìã *–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è:* –¢—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤:\n"
            for cert in certification:
                analysis += f"  ‚Ä¢ {cert}\n"
            analysis += "\n"
        else:
            analysis += "‚úÖ *–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è:* –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –Ω–µ —Ç—Ä–µ–±—É—é—Ç—Å—è.\n\n"
        
        # –ê–Ω–∞–ª–∏–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π
        if restrictions:
            analysis += "‚ö†Ô∏è *–í–Ω–∏–º–∞–Ω–∏–µ:* –ï—Å—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –Ω–∞ –≤–≤–æ–∑/–≤—ã–≤–æ–∑.\n\n"
        else:
            analysis += "üöÄ *–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:* –¢–æ–≤–∞—Ä —Å–≤–æ–±–æ–¥–Ω–æ –ø–µ—Ä–µ–º–µ—â–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ –≥—Ä–∞–Ω–∏—Ü—É.\n\n"
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        analysis += "üí° *–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:*\n"
        analysis += "‚Ä¢ –£—Ç–æ—á–Ω–∏—Ç–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ —Å—Ç–∞–≤–∫–∏ –Ω–∞ –¥–∞—Ç—É –æ–ø–µ—Ä–∞—Ü–∏–∏\n"
        analysis += "‚Ä¢ –ü—Ä–æ–∫–æ–Ω—Å—É–ª—å—Ç–∏—Ä—É–π—Ç–µ—Å—å —Å —Ç–∞–º–æ–∂–µ–Ω–Ω—ã–º –±—Ä–æ–∫–µ—Ä–æ–º\n"
        analysis += "‚Ä¢ –ü–æ–¥–≥–æ—Ç–æ–≤—å—Ç–µ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –∑–∞—Ä–∞–Ω–µ–µ\n\n"
        
        analysis += "‚è∞ *–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –∞–Ω–∞–ª–∏–∑–∞:* –¥–∞–Ω–Ω—ã–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã –Ω–∞ —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É"
        
        return analysis
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ AI-–∞–Ω–∞–ª–∏–∑–∞: {e}")
        return "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ AI-–∞–Ω–∞–ª–∏–∑–∞"

def get_statistics() -> str:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è"""
    try:
        stats = f"üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –í–≠–î –≠–∫—Å–ø–µ—Ä—Ç:*\n\n"
        stats += f"üî¢ –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {request_stats['total_requests']}\n"
        stats += f"üîç –ü–æ–∏—Å–∫ –ø–æ –∫–æ–¥–∞–º: {request_stats['code_searches']}\n"
        stats += f"üìù –ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—è–º: {request_stats['name_searches']}\n"
        stats += f"üß† AI-–∞–Ω–∞–ª–∏–∑–æ–≤: {request_stats['ai_requests']}\n\n"
        
        if request_stats['popular_codes']:
            stats += "üèÜ *–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –∫–æ–¥—ã:*\n"
            sorted_codes = sorted(request_stats['popular_codes'].items(), 
                                key=lambda x: x[1], reverse=True)[:5]
            for code, count in sorted_codes:
                stats += f"‚Ä¢ {code}: {count} –∑–∞–ø—Ä–æ—Å–æ–≤\n"
        
        return stats
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        return "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"

def route_message(text: str, ved_db=None) -> str:
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π"""
    try:
        if not ved_db:
            return "üß† –ó–∞–ø—Ä–æ—Å –æ–±—Ä–∞–±–æ—Ç–∞–Ω: " + text + "\n\n–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ —É–∫–∞–∂–∏—Ç–µ –∫–æ–¥ –¢–ù –í–≠–î –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞."
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        request_stats['total_requests'] += 1
        
        text = text.strip()
        
        # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
        if text.lower() in ['—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', 'stats', '/stats']:
            return get_statistics()
        
        if text.lower() in ['–ø–æ–º–æ—â—å', 'help', '/help']:
            return get_help_message()
        
        # –ü–æ–ø—ã—Ç–∫–∞ AI-–∞–Ω–∞–ª–∏–∑–∞
        ai_result = handle_ai_analysis(text, ved_db)
        if ai_result:
            return ai_result
        
        # –û–±—ã—á–Ω—ã–π –ø–æ–∏—Å–∫
        search_result = improved_search(text, ved_db)
        if search_result:
            return search_result
        
        # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
        request_stats['name_searches'] += 1
        return get_not_found_message(text)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏: {e}")
        return f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞: {str(e)}"

def get_help_message() -> str:
    """–°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–º–æ—â–∏"""
    return """ü§ñ *–í–≠–î –≠–∫—Å–ø–µ—Ä—Ç - –ü–æ–º–æ—â—å*

üìã *–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:*
‚Ä¢ –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –¢–ù –í–≠–î (10 —Ü–∏—Ñ—Ä): `8471300000`
‚Ä¢ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞: `–Ω–æ—É—Ç–±—É–∫`
‚Ä¢ –ó–∞–ø—Ä–æ—Å–∏—Ç–µ AI-–∞–Ω–∞–ª–∏–∑: `–∞–Ω–∞–ª–∏–∑ 8471300000`
‚Ä¢ –ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É: `—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞`

üîç *–ü—Ä–∏–º–µ—Ä—ã –∑–∞–ø—Ä–æ—Å–æ–≤:*
‚Ä¢ `8517120000` - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–º–∞—Ä—Ç—Ñ–æ–Ω–∞—Ö
‚Ä¢ `–∞–≤—Ç–æ–º–æ–±–∏–ª—å` - –ø–æ–∏—Å–∫ –∫–æ–¥–æ–≤ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π  
‚Ä¢ `–∞–Ω–∞–ª–∏–∑ 2709000000` - AI-–∞–Ω–∞–ª–∏–∑ –Ω–µ—Ñ—Ç–∏

‚ö° *–ë—ã—Å—Ç—Ä—ã–µ –∫–æ–º–∞–Ω–¥—ã:*
‚Ä¢ `–ø–æ–º–æ—â—å` - —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
‚Ä¢ `—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞` - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è

üí° *–°–æ–≤–µ—Ç:* –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ—á–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –ª—É—á—à–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞."""

def get_not_found_message(query: str) -> str:
    """–°–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–≥–¥–∞ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"""
    return f"""‚ùå –ü–æ –∑–∞–ø—Ä–æ—Å—É \"{query}\" –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.

üí° *–ü–æ–ø—Ä–æ–±—É–π—Ç–µ:*
‚Ä¢ –£–∫–∞–∑–∞—Ç—å 10-–∑–Ω–∞—á–Ω—ã–π –∫–æ–¥ –¢–ù –í–≠–î
‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–∏—è

üîç *–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã:*
‚Ä¢ `–Ω–æ—É—Ç–±—É–∫` - –ø–æ—Ä—Ç–∞—Ç–∏–≤–Ω—ã–µ –∫–æ–º–ø—å—é—Ç–µ—Ä—ã
‚Ä¢ `—Å–º–∞—Ä—Ç—Ñ–æ–Ω` - –º–æ–±–∏–ª—å–Ω—ã–µ —Ç–µ–ª–µ—Ñ–æ–Ω—ã
‚Ä¢ `–∞–≤—Ç–æ–º–æ–±–∏–ª—å` - –ª–µ–≥–∫–æ–≤—ã–µ –∞–≤—Ç–æ–º–æ–±–∏–ª–∏
‚Ä¢ `–∫–æ—Ñ–µ` - –∫–æ—Ñ–µ–π–Ω—ã–µ –∑–µ—Ä–Ω–∞

‚ùì –ù–∞–ø–∏—à–∏—Ç–µ `–ø–æ–º–æ—â—å` –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π."""