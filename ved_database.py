import json
import logging
from typing import List, Dict, Optional, Any

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class VEDDatabase:
    def __init__(self, json_file: str = 'tnved_database.json'):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¢–ù –í–≠–î"""
        self.json_file = json_file
        self.data = []
        self.load_database()
    
    def _format_duties(self, duties: dict) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—à–ª–∏–Ω"""
        if not duties:
            return "–ù–µ —É–∫–∞–∑–∞–Ω–∞"
        
        formatted = []
        for country, rate in duties.items():
            if rate and rate != 0:
                formatted.append(f"{country}: {rate}%")
        
        return ", ".join(formatted) if formatted else "–ù–µ —É–∫–∞–∑–∞–Ω–∞"

    def _format_certification(self, cert: dict) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
        if not cert:
            return "–ù–µ —É–∫–∞–∑–∞–Ω–∞"
        
        return cert.get('type', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')
    
    def load_database(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏–∑ JSON —Ñ–∞–π–ª–∞"""
        try:
            with open(self.json_file, 'r', encoding='utf-8') as f:
                raw_data = json.load(f)
            
            self.data = []
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ñ–∞–π–ª–∞
            if isinstance(raw_data, dict):
                # –ò—â–µ–º –º–∞—Å—Å–∏–≤ —Ç–æ–≤–∞—Ä–æ–≤ –≤ —Ä–∞–∑–Ω—ã—Ö –∫–ª—é—á–∞—Ö
                products_array = None
                for key in ['products', 'data', 'items', 'codes']:
                    if key in raw_data and isinstance(raw_data[key], list):
                        products_array = raw_data[key]
                        break
                
                # –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω –º–∞—Å—Å–∏–≤, –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä–Ω–µ–≤–æ–π —É—Ä–æ–≤–µ–Ω—å
                if not products_array:
                    # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º –∫–ª—é—á–∞–º –≤–µ—Ä—Ö–Ω–µ–≥–æ —É—Ä–æ–≤–Ω—è
                    for key, value in raw_data.items():
                        if isinstance(value, list) and value:
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –≤ –ø–µ—Ä–≤–æ–º —ç–ª–µ–º–µ–Ω—Ç–µ code –∏–ª–∏ –∫–æ–¥
                            first_item = value[0]
                            if isinstance(first_item, dict) and ('code' in first_item or '–∫–æ–¥' in first_item):
                                products_array = value
                                break
                
                if products_array:
                    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –Ω–∞—à—É —Å—Ç—Ä—É–∫—Ç—É—Ä—É
                    for item in products_array:
                        if isinstance(item, dict):
                            self.data.append({
                                '–∫–æ–¥': item.get('code', item.get('–∫–æ–¥', '')),
                                '–Ω–∞–∑–≤–∞–Ω–∏–µ': item.get('name', item.get('–Ω–∞–∑–≤–∞–Ω–∏–µ', '')),
                                '–æ–ø–∏—Å–∞–Ω–∏–µ': item.get('description', item.get('–æ–ø–∏—Å–∞–Ω–∏–µ', '')),
                                '–≥—Ä—É–ø–ø–∞': item.get('group', item.get('–≥—Ä—É–ø–ø–∞', '')),
                                '–ø–æ—à–ª–∏–Ω–∞': self._format_duties(item.get('duties', {})),
                                '—Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è': self._format_certification(item.get('certification', {}))
                            })
                            
            elif isinstance(raw_data, list):
                # –ï—Å–ª–∏ —ç—Ç–æ –º–∞—Å—Å–∏–≤ —Ç–æ–≤–∞—Ä–æ–≤
                for item in raw_data:
                    if isinstance(item, dict):
                        self.data.append({
                            '–∫–æ–¥': item.get('code', item.get('–∫–æ–¥', '')),
                            '–Ω–∞–∑–≤–∞–Ω–∏–µ': item.get('name', item.get('–Ω–∞–∑–≤–∞–Ω–∏–µ', '')),
                            '–æ–ø–∏—Å–∞–Ω–∏–µ': item.get('description', item.get('–æ–ø–∏—Å–∞–Ω–∏–µ', '')),
                            '–≥—Ä—É–ø–ø–∞': item.get('group', item.get('–≥—Ä—É–ø–ø–∞', '')),
                            '–ø–æ—à–ª–∏–Ω–∞': self._format_duties(item.get('duties', {})),
                            '—Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è': self._format_certification(item.get('certification', {}))
                        })
                    
            logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(self.data)} –∫–æ–¥–æ–≤ –¢–ù –í–≠–î")
            if self.data:
                logger.info(f"–ü–µ—Ä–≤—ã–π —Ç–æ–≤–∞—Ä: {self.data[0]['–∫–æ–¥']} - {self.data[0]['–Ω–∞–∑–≤–∞–Ω–∏–µ']}")
                
        except FileNotFoundError:
            logger.error(f"–§–∞–π–ª {self.json_file} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            self.data = []
        except json.JSONDecodeError as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {e}")
            self.data = []
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –±–∞–∑—ã: {e}")
            self.data = []
    
    def find_by_code(self, code: str) -> Optional[Dict]:
        """–ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–∞ –ø–æ –∫–æ–¥—É –¢–ù –í–≠–î (—Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ)"""
        if not code:
            return None
        
        # –û—á–∏—Å—Ç–∫–∞ –∫–æ–¥–∞ –æ—Ç –ø—Ä–æ–±–µ–ª–æ–≤ –∏ –ø—Ä–∏–≤–µ–¥–µ–Ω–∏–µ –∫ —Å—Ç—Ä–æ–∫–µ
        search_code = str(code).strip()
        
        try:
            for item in self.data:
                if isinstance(item, dict) and str(item.get('–∫–æ–¥', '')).strip() == search_code:
                    logger.info(f"–ù–∞–π–¥–µ–Ω —Ç–æ–≤–∞—Ä –ø–æ –∫–æ–¥—É: {search_code}")
                    return item
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ –∫–æ–¥—É {code}: {e}")
        
        logger.warning(f"–¢–æ–≤–∞—Ä —Å –∫–æ–¥–æ–º {search_code} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return None
    
    def search_by_name(self, name: str, limit: int = 10) -> List[Dict]:
        """–ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é (—á–∞—Å—Ç–∏—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ)"""
        if not name or len(name.strip()) < 2:
            return []
        
        search_name = name.strip().lower()
        results = []
        
        try:
            for item in self.data:
                if isinstance(item, dict):
                    item_name = str(item.get('–Ω–∞–∑–≤–∞–Ω–∏–µ', '')).lower()
                    item_desc = str(item.get('–æ–ø–∏—Å–∞–Ω–∏–µ', '')).lower()
                    
                    # –ü–æ–∏—Å–∫ –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏ –∏–ª–∏ –æ–ø–∏—Å–∞–Ω–∏–∏
                    if search_name in item_name or search_name in item_desc:
                        results.append(item)
                        if len(results) >= limit:
                            break
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é {name}: {e}")
        
        logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(results)} —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ –∑–∞–ø—Ä–æ—Å—É: {name}")
        return results
    
    def get_all_products(self) -> List[Dict]:
        """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Ç–æ–≤–∞—Ä—ã"""
        return self.data
    
    def get_product_count(self) -> int:
        """–ü–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –±–∞–∑–µ"""
        return len(self.data)
    
    # –ú–µ—Ç–æ–¥—ã —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å–æ —Å—Ç–∞—Ä—ã–º API
    def get_product_by_code(self, code: str) -> Optional[Dict]:
        """–°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å: –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–≤–∞—Ä –ø–æ –∫–æ–¥—É"""
        return self.find_by_code(code)
    
    def search_products(self, query: str, limit: int = 10) -> List[Dict]:
        """–°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å: –ø–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤"""
        return self.search_by_name(query, limit)
    
    def search_product(self, query: str, limit: int = 10) -> List[Dict]:
        """–°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å: –ø–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–∞ (–¥–ª—è ved_router)"""
        return self.search_by_name(query, limit)
    
    def get_random_products(self, count: int = 5) -> List[Dict]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ª—É—á–∞–π–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã"""
        import random
        valid_products = [item for item in self.data if isinstance(item, dict)]
        if len(valid_products) <= count:
            return valid_products
        return random.sample(valid_products, count)
    
    def get_products_by_group(self, group: str) -> List[Dict]:
        """–ü–æ–ª—É—á–∏—Ç—å —Ç–æ–≤–∞—Ä—ã –ø–æ –≥—Ä—É–ø–ø–µ"""
        if not group:
            return []
        
        results = []
        search_group = group.strip().lower()
        
        try:
            for item in self.data:
                if isinstance(item, dict):
                    item_group = str(item.get('–≥—Ä—É–ø–ø–∞', '')).lower()
                    if search_group in item_group:
                        results.append(item)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ –≥—Ä—É–ø–ø–µ {group}: {e}")
        
        return results
    
    def format_product_info(self, product: Dict) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ–≤–∞—Ä–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        if not product or not isinstance(product, dict):
            return "–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω"
        
        try:
            code = product.get('–∫–æ–¥', '–ù–µ —É–∫–∞–∑–∞–Ω')
            name = product.get('–Ω–∞–∑–≤–∞–Ω–∏–µ', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
            description = product.get('–æ–ø–∏—Å–∞–Ω–∏–µ', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
            group = product.get('–≥—Ä—É–ø–ø–∞', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')
            duty = product.get('–ø–æ—à–ª–∏–Ω–∞', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')
            cert = product.get('—Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')
            
            return f"""üì¶ **–ö–æ–¥ –¢–ù –í–≠–î:** {code}
üìù **–ù–∞–∑–≤–∞–Ω–∏–µ:** {name}
üìã **–û–ø–∏—Å–∞–Ω–∏–µ:** {description}
üìÇ **–ì—Ä—É–ø–ø–∞:** {group}
üí∞ **–ü–æ—à–ª–∏–Ω–∞:** {duty}
‚úÖ **–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è:** {cert}"""
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞: {e}")
            return "–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö"
    
    def format_search_results(self, results: List[Dict], query: str = "") -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞"""
        if not results:
            return f"‚ùå –¢–æ–≤–∞—Ä—ã –ø–æ –∑–∞–ø—Ä–æ—Å—É '{query}' –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"
        
        if len(results) == 1:
            return self.format_product_info(results[0])
        
        formatted = f"üîç –ù–∞–π–¥–µ–Ω–æ {len(results)} —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ –∑–∞–ø—Ä–æ—Å—É '{query}':\n\n"
        for i, product in enumerate(results[:10], 1):
            if isinstance(product, dict):
                code = product.get('–∫–æ–¥', '–ù–µ —É–∫–∞–∑–∞–Ω')
                name = product.get('–Ω–∞–∑–≤–∞–Ω–∏–µ', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')[:60]
                if len(product.get('–Ω–∞–∑–≤–∞–Ω–∏–µ', '')) > 60:
                    name += "..."
                formatted += f"{i}. **{code}** - {name}\n"
        
        if len(results) > 10:
            formatted += f"\n... –∏ –µ—â–µ {len(results) - 10} —Ç–æ–≤–∞—Ä–æ–≤"
        
        return formatted

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
ved_db = VEDDatabase()

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
def get_product_by_code(code: str) -> Optional[Dict]:
    """–ì–ª–æ–±–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ –ø–æ –∫–æ–¥—É"""
    return ved_db.find_by_code(code)

def search_by_name(name: str, limit: int = 10) -> List[Dict]:
    """–ì–ª–æ–±–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é"""
    return ved_db.search_by_name(name, limit)

def get_all_products() -> List[Dict]:
    """–ì–ª–æ–±–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤"""
    return ved_db.get_all_products()
