from fastapi import FastAPI
from wed_expert_genspark_integration import GensparktWEDAgent, ProductClassification
import threading
import os
import telebot
from ved_router import route_message
from ved_database import VEDDatabase
import re
import hashlib
import json
from datetime import datetime, timedelta

# FastAPI
app = FastAPI(title="WED Expert API")
genspark_agent = GensparktWEDAgent()

# Initialize VEDDatabase
ved_db = VEDDatabase()

# Telegram Bot
BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
bot = telebot.TeleBot(BOT_TOKEN)

# –ö—ç—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
class ResultCache:
    """–ü—Ä–æ—Å—Ç–æ–π –∫—ç—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏"""

    def __init__(self, ttl_minutes=60):
        self.cache = {}
        self.ttl = timedelta(minutes=ttl_minutes)
        self.stats = {"hits": 0, "misses": 0}

    def _generate_key(self, product):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–ª—é—á –¥–ª—è –∫—ç—à–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Ç–æ–≤–∞—Ä–∞"""
        data = f"{product.name}_{product.material}_{product.function}_{product.origin_country}"
        return hashlib.md5(data.encode()).hexdigest()

    def get(self, product):
        """–ü–æ–ª—É—á–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏–∑ –∫—ç—à–∞ –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –Ω–µ —É—Å—Ç–∞—Ä–µ–ª"""
        key = self._generate_key(product)
        if key in self.cache:
            timestamp, value = self.cache[key]
            if datetime.now() - timestamp < self.ttl:
                self.stats["hits"] += 1
                return value
        self.stats["misses"] += 1
        return None

    def set(self, product, value):
        """–î–æ–±–∞–≤–ª—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –∫—ç—à"""
        key = self._generate_key(product)
        self.cache[key] = (datetime.now(), value)

    def get_stats(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫—ç—à–∞"""
        total = self.stats["hits"] + self.stats["misses"]
        hit_ratio = self.stats["hits"] / total if total > 0 else 0
        return {
            "size": len(self.cache),
            "hits": self.stats["hits"],
            "misses": self.stats["misses"],
            "hit_ratio": hit_ratio
        }

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫—ç—à–∞
cache = ResultCache()

@app.get("/")
def read_root():
    return {"status": "running", "service": "WED Expert API"}

@app.get("/classify")
def classify_product(
    name: str,
    material: str = "",
    function: str = "",
    processing_level: str = "",
    origin_country: str = "",
    value: float = 0.0
):
    product = ProductClassification(
        name=name,
        material=material,
        function=function,
        processing_level=processing_level,
        origin_country=origin_country,
        value=value
    )

    # Check cache first
    cached_result = cache.get(product)
    if cached_result:
        return {"result": cached_result, "source": "cache"}

    # If not in cache, perform classification
    result = genspark_agent.classify_product(product)

    # Save to cache
    cache.set(product, result)

    return {"result": result, "source": "api"}

@app.get("/cache/stats")
def cache_stats():
    return cache.get_stats()

@bot.message_handler(commands=['start', 'help'])
def send_welcome(message):
    bot.reply_to(message, "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –Ø ‚Äî –í–≠–î –≠–∫—Å–ø–µ—Ä—Ç —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π Genspark AI.\n\n–ö–æ–º–∞–Ω–¥—ã:\n/start - –Ω–∞—á–∞–ª–æ\n/genspark - AI –∞–Ω–∞–ª–∏–∑\n\n–ò–ª–∏ –ø—Ä–æ—Å—Ç–æ –∑–∞–¥–∞–≤–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å—ã!")

@bot.message_handler(commands=['genspark'])
def genspark_classify(message):
    bot.reply_to(message, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —á–µ—Ä–µ–∑ Genspark AI\n–ü—Ä–∏–º–µ—Ä: –∫–æ—Ñ–µ–º–∞—à–∏–Ω–∞ DeLonghi")

@bot.message_handler(func=lambda message: True)
def handle_all_messages(message):
    user_input = message.text

    try:
        # –ï—Å–ª–∏ —É–ø–æ–º–∏–Ω–∞–µ—Ç—Å—è genspark –∏–ª–∏ AI - –∏—Å–ø–æ–ª—å–∑—É–µ–º Genspark
        if any(key.lower() in user_input.lower() for key in ['genspark', 'ai', '–Ω–µ–π—Ä–æ—Å–µ—Ç—å', '–∞–Ω–∞–ª–∏–∑']):
            product = ProductClassification(
                name=user_input,
                material="",
                function="",
                processing_level="",
                origin_country="",
                value=0.0
            )

            # Check cache first
            cached_result = cache.get(product)
            if cached_result:
                bot.reply_to(message, f"üß† *–ê–Ω–∞–ª–∏–∑ —Ç–æ–≤–∞—Ä–∞:*\n\n{cached_result}\n\n(—Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏–∑ –∫—ç—à–∞)")
                return

            # If not in cache, perform classification
            result = genspark_agent.classify_product(product)

            # Save to cache
            cache.set(product, result)

            bot.reply_to(message, f"üß† *–ê–Ω–∞–ª–∏–∑ —Ç–æ–≤–∞—Ä–∞ —á–µ—Ä–µ–∑ Genspark AI:*\n\n{result}")
            return

        # –ò–Ω–∞—á–µ - –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ —Ä–æ—É—Ç–µ—Ä
        response = route_message(user_input, ved_db)
        bot.reply_to(message, response, parse_mode="Markdown")

    except Exception as e:
        bot.reply_to(message, f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")

def start_bot():
    bot.infinity_polling()

@app.on_event("startup")
def startup_event():
    threading.Thread(target=start_bot, daemon=True).start()

# For direct launching without FastAPI
if __name__ == "__main__":
    # Start bot on a separate thread
    import uvicorn
    threading.Thread(target=start_bot, daemon=True).start()
    uvicorn.run(app, host="0.0.0.0", port=8000)
