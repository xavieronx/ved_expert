from fastapi import FastAPI
from wed_expert_genspark_integration import GensparktWEDAgent, ProductClassification
import threading
import os
import telebot
import time
from ved_router import route_message
from ved_database import VEDDatabase
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger('VEDBot')

# FastAPI
app = FastAPI(title="WED Expert API")
genspark_agent = GensparktWEDAgent()

# Initialize VEDDatabase
ved_db = VEDDatabase()

# Telegram Bot
BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")

# –ì–õ–û–ë–ê–õ–¨–ù–ê–Ø –ü–ï–†–ï–ú–ï–ù–ù–ê–Ø –î–õ–Ø –ö–û–ù–¢–†–û–õ–Ø –ë–û–¢–ê
bot_instance = None
bot_thread = None
is_bot_running = False

def create_bot():
    """–°–æ–∑–¥–∞–µ—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞"""
    global bot_instance
    
    if not BOT_TOKEN:
        logger.error("BOT_TOKEN not found in environment variables")
        return None
    
    try:
        bot_instance = telebot.TeleBot(BOT_TOKEN)
        logger.info("Bot instance created successfully")
        return bot_instance
    except Exception as e:
        logger.error(f"Failed to create bot: {e}")
        return None

def start_bot():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    global is_bot_running
    
    if is_bot_running:
        logger.warning("Bot is already running")
        return
    
    try:
        bot = create_bot()
        if not bot:
            logger.error("Failed to create bot instance")
            return
        
        logger.info("Starting bot...")
        
        # –û—á–∏—Å—Ç–∫–∞ webhook –ø–µ—Ä–µ–¥ —Å—Ç–∞—Ä—Ç–æ–º
        try:
            bot.remove_webhook()
            time.sleep(2)
            logger.info("Webhook cleared")
        except Exception as e:
            logger.warning(f"Failed to clear webhook: {e}")
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥
        is_bot_running = True
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º polling
        logger.info("Starting polling...")
        bot.infinity_polling(none_stop=True, interval=1)
        
    except Exception as e:
        logger.error(f"Bot error: {e}")
        is_bot_running = False

# –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞
bot = create_bot()

if bot:
    @bot.message_handler(commands=['start', 'help'])
    def send_welcome(message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥ start –∏ help"""
        welcome_text = """–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –í–≠–î –≠–∫—Å–ø–µ—Ä—Ç! üöÄ

üéØ **–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:**
‚Ä¢ –ü–æ–∏—Å–∫ –ø–æ –∫–æ–¥–∞–º –¢–ù –í–≠–î (10 —Ü–∏—Ñ—Ä)
‚Ä¢ –ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é —Ç–æ–≤–∞—Ä–∞
‚Ä¢ –≠–∫—Å–ø–µ—Ä—Ç–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —á–µ—Ä–µ–∑ –ò–ò

üìù **–ö–æ–º–∞–Ω–¥—ã:**
/start - —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
/help - —Å–ø—Ä–∞–≤–∫–∞
/genspark - –ò–ò –∞–Ω–∞–ª–∏–∑ —Ç–æ–≤–∞—Ä–∞

üí° **–ü—Ä–∏–º–µ—Ä—ã –∑–∞–ø—Ä–æ—Å–æ–≤:**
‚Ä¢ 8471300000
‚Ä¢ –Ω–æ—É—Ç–±—É–∫
‚Ä¢ —Å–≤–∏–Ω–∏–Ω–∞ –∑–∞–º–æ—Ä–æ–∂–µ–Ω–Ω–∞—è

–ü—Ä–æ—Å—Ç–æ –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –∏–ª–∏ –∫–æ–¥!"""
        
        try:
            bot.reply_to(message, welcome_text)
            logger.info(f"Welcome sent to user {message.from_user.id}")
        except Exception as e:
            logger.error(f"Error sending welcome: {e}")

    @bot.message_handler(commands=['genspark'])
    def genspark_classify(message):
        """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —á–µ—Ä–µ–∑ Genspark"""
        try:
            bot.reply_to(message, "üß† –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –¥–ª—è —É–≥–ª—É–±–ª–µ–Ω–Ω–æ–≥–æ –ò–ò-–∞–Ω–∞–ª–∏–∑–∞\n\n–ü—Ä–∏–º–µ—Ä: –∫–æ—Ñ–µ–º–∞—à–∏–Ω–∞ DeLonghi 1200W")
        except Exception as e:
            logger.error(f"Error in genspark command: {e}")

    @bot.message_handler(func=lambda message: True)
    def handle_all_messages(message):
        """–ì–ª–∞–≤–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        try:
            user_input = message.text
            user_id = message.from_user.id
            
            logger.info(f"Query from user {user_id}: {user_input[:50]}...")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–µ–Ω –ª–∏ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π Genspark –∞–Ω–∞–ª–∏–∑
            force_genspark = any(keyword.lower() in user_input.lower() 
                               for keyword in ['genspark', 'ai', '–Ω–µ–π—Ä–æ—Å–µ—Ç—å', '–∞–Ω–∞–ª–∏–∑', '–∏–∏'])
            
            if force_genspark:
                # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π Genspark –∞–Ω–∞–ª–∏–∑
                logger.info("Force Genspark analysis requested")
                
                product = ProductClassification(
                    name=user_input,
                    material="",
                    function="",
                    processing_level="",
                    origin_country="",
                    value=0.0
                )
                
                genspark_result = genspark_agent.classify_product(product)
                response = f"üß† **–ò–ò-–ê–ù–ê–õ–ò–ó –¢–û–í–ê–†–ê:**\n\n{genspark_result}"
                
            else:
                # –û–±—ã—á–Ω—ã–π –ø–æ–∏—Å–∫ —á–µ—Ä–µ–∑ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
                response = route_message(user_input, ved_db)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
            bot.reply_to(message, response, parse_mode="Markdown")
            logger.info(f"Response sent to user {user_id}")
            
        except Exception as e:
            logger.error(f"Error processing message: {e}")
            try:
                error_response = f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞: {str(e)}"
                bot.reply_to(message, error_response)
            except:
                logger.error("Failed to send error response")

@app.get("/")
def read_root():
    return {
        "status": "running", 
        "service": "WED Expert API",
        "bot_running": is_bot_running
    }

@app.get("/bot/status")
def bot_status():
    """–°—Ç–∞—Ç—É—Å –±–æ—Ç–∞"""
    return {
        "bot_running": is_bot_running,
        "bot_instance_exists": bot_instance is not None,
        "bot_token_configured": BOT_TOKEN is not None
    }

@app.get("/bot/restart")
def restart_bot():
    """–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    global bot_instance, is_bot_running, bot_thread
    
    try:
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π –±–æ—Ç
        is_bot_running = False
        time.sleep(3)
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
        bot_instance = None
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤ –Ω–æ–≤–æ–º –ø–æ—Ç–æ–∫–µ
        if bot_thread and bot_thread.is_alive():
            bot_thread.join(timeout=5)
        
        bot_thread = threading.Thread(target=start_bot, daemon=True)
        bot_thread.start()
        
        return {"status": "bot restarted"}
    except Exception as e:
        logger.error(f"Failed to restart bot: {e}")
        return {"error": str(e)}

# –î–ª—è –ø—Ä—è–º–æ–≥–æ –∑–∞–ø—É—Å–∫–∞
if __name__ == "__main__":
    import uvicorn
    logger.info("Starting in standalone mode...")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    bot_thread = threading.Thread(target=start_bot, daemon=True)
    bot_thread.start()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º FastAPI
    uvicorn.run(app, host="0.0.0.0", port=8000)