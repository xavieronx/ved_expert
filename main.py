from fastapi import FastAPI, Request
from wed_expert_genspark_integration import GensparktWEDAgent, ProductClassification
import os
import telebot
from ved_router import route_message
from ved_database import VEDDatabase
import logging
import json

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger('VEDBot')

# FastAPI
app = FastAPI(title="WED Expert API")
genspark_agent = GensparktWEDAgent()
ved_db = VEDDatabase()

# Telegram Bot
BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
WEBHOOK_URL = "https://vedexpert-production.up.railway.app/webhook"

if not BOT_TOKEN:
    logger.error("BOT_TOKEN not found!")
    exit(1)

bot = telebot.TeleBot(BOT_TOKEN)

@bot.message_handler(commands=['start', 'help'])
def send_welcome(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥ start –∏ help"""
    welcome_text = """–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –í–≠–î –≠–∫—Å–ø–µ—Ä—Ç! üöÄ

üéØ **–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:**
‚Ä¢ –ü–æ–∏—Å–∫ –ø–æ –∫–æ–¥–∞–º –¢–ù –í–≠–î (10 —Ü–∏—Ñ—Ä)
‚Ä¢ –ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é —Ç–æ–≤–∞—Ä–∞
‚Ä¢ –≠–∫—Å–ø–µ—Ä—Ç–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —á–µ—Ä–µ–∑ –ò–ò

üìù **–ö–æ–º–∞–Ω–¥—ã:**
/start - —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
/help - —Å–ø—Ä–∞–≤–∫–∞
/genspark - –ò–ò –∞–Ω–∞–ª–∏–∑ —Ç–æ–≤–∞—Ä–∞

üí° **–ü—Ä–∏–º–µ—Ä—ã –∑–∞–ø—Ä–æ—Å–æ–≤:**
‚Ä¢ 8471300000
‚Ä¢ –Ω–æ—É—Ç–±—É–∫
‚Ä¢ —Å–≤–∏–Ω–∏–Ω–∞ –∑–∞–º–æ—Ä–æ–∂–µ–Ω–Ω–∞—è

–ü—Ä–æ—Å—Ç–æ –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –∏–ª–∏ –∫–æ–¥!"""
    
    try:
        bot.reply_to(message, welcome_text)
        logger.info(f"Welcome sent to user {message.from_user.id}")
    except Exception as e:
        logger.error(f"Error sending welcome: {e}")

@bot.message_handler(commands=['genspark'])
def genspark_classify(message):
    """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —á–µ—Ä–µ–∑ Genspark"""
    try:
        bot.reply_to(message, "üß† –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –¥–ª—è —É–≥–ª—É–±–ª–µ–Ω–Ω–æ–≥–æ –ò–ò-–∞–Ω–∞–ª–∏–∑–∞\n\n–ü—Ä–∏–º–µ—Ä: –∫–æ—Ñ–µ–º–∞—à–∏–Ω–∞ DeLonghi 1200W")
    except Exception as e:
        logger.error(f"Error in genspark command: {e}")

@bot.message_handler(func=lambda message: True)
def handle_all_messages(message):
    """–ì–ª–∞–≤–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π"""
    try:
        user_input = message.text
        user_id = message.from_user.id
        
        logger.info(f"Query from user {user_id}: {user_input[:50]}...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–µ–Ω –ª–∏ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π Genspark –∞–Ω–∞–ª–∏–∑
        force_genspark = any(keyword.lower() in user_input.lower() 
                           for keyword in ['genspark', 'ai', '–Ω–µ–π—Ä–æ—Å–µ—Ç—å', '–∞–Ω–∞–ª–∏–∑', '–∏–∏'])
        
        if force_genspark:
            # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π Genspark –∞–Ω–∞–ª–∏–∑
            logger.info("Force Genspark analysis requested")
            
            product = ProductClassification(
                name=user_input,
                material="",
                function="",
                processing_level="",
                origin_country="",
                value=0.0
            )
            
            genspark_result = genspark_agent.classify_product(product)
            response = f"üß† **–ò–ò-–ê–ù–ê–õ–ò–ó –¢–û–í–ê–†–ê:**\n\n{genspark_result}"
            
        else:
            # –û–±—ã—á–Ω—ã–π –ø–æ–∏—Å–∫ —á–µ—Ä–µ–∑ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            response = route_message(user_input, ved_db)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
        bot.reply_to(message, response, parse_mode="Markdown")
        logger.info(f"Response sent to user {user_id}")
        
    except Exception as e:
        logger.error(f"Error processing message: {e}")
        try:
            error_response = f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞: {str(e)}"
            bot.reply_to(message, error_response)
        except:
            logger.error("Failed to send error response")

@app.get("/")
def read_root():
    return {"status": "running", "service": "WED Expert API", "mode": "webhook"}

@app.post("/webhook")
async def webhook(request: Request):
    """Webhook –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç Telegram"""
    try:
        json_data = await request.json()
        update = telebot.types.Update.de_json(json_data)
        bot.process_new_updates([update])
        return {"status": "ok"}
    except Exception as e:
        logger.error(f"Webhook error: {e}")
        return {"status": "error", "message": str(e)}

@app.get("/set_webhook")
def set_webhook():
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ webhook"""
    try:
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π webhook
        bot.remove_webhook()
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–π
        result = bot.set_webhook(url=WEBHOOK_URL)
        
        if result:
            logger.info(f"Webhook set successfully: {WEBHOOK_URL}")
            return {"status": "webhook set", "url": WEBHOOK_URL}
        else:
            logger.error("Failed to set webhook")
            return {"status": "error", "message": "Failed to set webhook"}
            
    except Exception as e:
        logger.error(f"Error setting webhook: {e}")
        return {"status": "error", "message": str(e)}

@app.get("/webhook_info")
def webhook_info():
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ webhook"""
    try:
        info = bot.get_webhook_info()
        return {
            "url": info.url,
            "has_custom_certificate": info.has_custom_certificate,
            "pending_update_count": info.pending_update_count,
            "last_error_date": info.last_error_date,
            "last_error_message": info.last_error_message,
            "max_connections": info.max_connections,
            "allowed_updates": info.allowed_updates
        }
    except Exception as e:
        logger.error(f"Error getting webhook info: {e}")
        return {"status": "error", "message": str(e)}

@app.on_event("startup")
async def startup():
    """Startup event - —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º webhook"""
    logger.info("Setting up webhook on startup...")
    try:
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π webhook
        bot.remove_webhook()
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–π webhook
        result = bot.set_webhook(url=WEBHOOK_URL)
        
        if result:
            logger.info(f"‚úÖ Webhook set successfully: {WEBHOOK_URL}")
        else:
            logger.error("‚ùå Failed to set webhook")
            
    except Exception as e:
        logger.error(f"‚ùå Error in startup: {e}")

if __name__ == "__main__":
    import uvicorn
    logger.info("Starting in standalone mode with webhook...")
    uvicorn.run(app, host="0.0.0.0", port=8000)