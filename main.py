from fastapi import FastAPI
from wed_expert_genspark_integration import GensparktWEDAgent, ProductClassification
import threading
import os
import telebot
import time
from enhanced_ved_system import EnhancedVEDExpertSystem
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('bot.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger('VEDBot')

# FastAPI
app = FastAPI(title="Enhanced WED Expert API")
genspark_agent = GensparktWEDAgent()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –í–≠–î
ved_system = EnhancedVEDExpertSystem(genspark_agent)

# Telegram Bot
BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
bot = telebot.TeleBot(BOT_TOKEN)

# –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
usage_stats = {
    "total_queries": 0,
    "successful_queries": 0,
    "genspark_queries": 0,
    "cache_hits": 0
}

@app.get("/")
def read_root():
    return {
        "status": "running", 
        "service": "Enhanced WED Expert API",
        "version": "2.0.0"
    }

@app.get("/stats")
def get_statistics():
    """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è"""
    cache_stats = ved_system.database.cache.stats if ved_system.database.cache else {}
    
    return {
        **usage_stats,
        "cache_stats": cache_stats,
        "database_codes": len(ved_system.database.database.get("codes", []))
    }

@app.get("/classify")
def classify_product(
    name: str,
    material: str = "",
    function: str = "",
    processing_level: str = "",
    origin_country: str = "",
    value: float = 0.0
):
    """API endpoint –¥–ª—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤"""
    try:
        product = ProductClassification(
            name=name,
            material=material,
            function=function,
            processing_level=processing_level,
            origin_country=origin_country,
            value=value
        )
        
        result = genspark_agent.classify_product(product)
        usage_stats["genspark_queries"] += 1
        
        return {"result": result, "source": "genspark_api"}
        
    except Exception as e:
        logger.error(f"Classification error: {e}")
        return {"error": str(e)}

def start_bot():
    """–ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞"""
    try:
        logger.info("Starting Telegram bot...")
        # –û—á–∏—Å—Ç–∫–∞ webhook
        bot.remove_webhook()
        time.sleep(1)
        bot.infinity_polling()
    except Exception as e:
        logger.error(f"Bot error: {e}")

@bot.message_handler(commands=['start', 'help'])
def send_welcome(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥ start –∏ help"""
    welcome_text = """–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –í–≠–î –≠–∫—Å–ø–µ—Ä—Ç 2.0! üöÄ

üéØ **–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:**
‚Ä¢ –ü–æ–∏—Å–∫ –ø–æ –∫–æ–¥–∞–º –¢–ù –í–≠–î (10 —Ü–∏—Ñ—Ä)
‚Ä¢ –ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é —Ç–æ–≤–∞—Ä–∞
‚Ä¢ –≠–∫—Å–ø–µ—Ä—Ç–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —á–µ—Ä–µ–∑ –ò–ò
‚Ä¢ –û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ + —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏

üìù **–ö–æ–º–∞–Ω–¥—ã:**
/start - —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
/help - —Å–ø—Ä–∞–≤–∫–∞
/stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã
/genspark - –ò–ò –∞–Ω–∞–ª–∏–∑ —Ç–æ–≤–∞—Ä–∞

üí° **–ü—Ä–∏–º–µ—Ä—ã –∑–∞–ø—Ä–æ—Å–æ–≤:**
‚Ä¢ 8471300000
‚Ä¢ –Ω–æ—É—Ç–±—É–∫
‚Ä¢ —Å–≤–∏–Ω–∏–Ω–∞ –∑–∞–º–æ—Ä–æ–∂–µ–Ω–Ω–∞—è
‚Ä¢ –∞–≤—Ç–æ–º–æ–±–∏–ª—å BMW

–ü—Ä–æ—Å—Ç–æ –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –∏–ª–∏ –∫–æ–¥!"""
    
    bot.reply_to(message, welcome_text)
    logger.info(f"Welcome sent to user {message.from_user.id}")

@bot.message_handler(commands=['stats'])
def send_stats(message):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è"""
    cache_stats = ved_system.database.cache.stats
    
    stats_text = f"""üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –í–≠–î –≠–∫—Å–ø–µ—Ä—Ç:**

üîç **–ó–∞–ø—Ä–æ—Å—ã:**
‚Ä¢ –í—Å–µ–≥–æ: {usage_stats['total_queries']}
‚Ä¢ –£—Å–ø–µ—à–Ω—ã—Ö: {usage_stats['successful_queries']}
‚Ä¢ –ò–ò –∞–Ω–∞–ª–∏–∑–æ–≤: {usage_stats['genspark_queries']}

üíæ **–ö—ç—à:**
‚Ä¢ –ü–æ–ø–∞–¥–∞–Ω–∏–π: {cache_stats['hits']}
‚Ä¢ –ü—Ä–æ–º–∞—Ö–æ–≤: {cache_stats['misses']}

üìö **–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö:**
‚Ä¢ –¢–æ–≤–∞—Ä–æ–≤ –≤ –±–∞–∑–µ: {len(ved_system.database.database.get('codes', []))}"""
    
    bot.reply_to(message, stats_text)

@bot.message_handler(commands=['genspark'])
def genspark_classify(message):
    """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —á–µ—Ä–µ–∑ Genspark"""
    bot.reply_to(message, "üß† –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –¥–ª—è —É–≥–ª—É–±–ª–µ–Ω–Ω–æ–≥–æ –ò–ò-–∞–Ω–∞–ª–∏–∑–∞\n\n–ü—Ä–∏–º–µ—Ä: –∫–æ—Ñ–µ–º–∞—à–∏–Ω–∞ DeLonghi 1200W")

@bot.message_handler(func=lambda message: True)
def handle_all_messages(message):
    """–ì–ª–∞–≤–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π"""
    user_input = message.text
    user_id = message.from_user.id
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    usage_stats["total_queries"] += 1
    
    logger.info(f"Query from user {user_id}: {user_input[:50]}...")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–µ–Ω –ª–∏ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π Genspark –∞–Ω–∞–ª–∏–∑
        force_genspark = any(keyword.lower() in user_input.lower() 
                           for keyword in ['genspark', 'ai', '–Ω–µ–π—Ä–æ—Å–µ—Ç—å', '–∞–Ω–∞–ª–∏–∑', '–∏–∏'])
        
        if force_genspark:
            # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π Genspark –∞–Ω–∞–ª–∏–∑
            logger.info("Force Genspark analysis requested")
            
            product = ProductClassification(
                name=user_input,
                material="",
                function="",
                processing_level="",
                origin_country="",
                value=0.0
            )
            
            genspark_result = genspark_agent.classify_product(product)
            usage_stats["genspark_queries"] += 1
            
            response = f"üß† **–ò–ò-–ê–ù–ê–õ–ò–ó –¢–û–í–ê–†–ê:**\n\n{genspark_result}"
            
        else:
            # –û–±—ã—á–Ω—ã–π –ø–æ–∏—Å–∫ —á–µ—Ä–µ–∑ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—É—é —Å–∏—Å—Ç–µ–º—É
            response = ved_system.process_query(user_input)
            usage_stats["successful_queries"] += 1
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
        bot.reply_to(message, response, parse_mode="Markdown")
        logger.info(f"Response sent to user {user_id}")
        
    except Exception as e:
        logger.error(f"Error processing message: {e}")
        error_response = f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞: {str(e)}"
        bot.reply_to(message, error_response)

@app.on_event("startup")
def startup_event():
    """–°–æ–±—ã—Ç–∏–µ –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    logger.info("Starting Enhanced VED Expert System...")
    threading.Thread(target=start_bot, daemon=True).start()
    logger.info("System started successfully")

# –î–ª—è –ø—Ä—è–º–æ–≥–æ –∑–∞–ø—É—Å–∫–∞
if __name__ == "__main__":
    import uvicorn
    logger.info("Starting in standalone mode...")
    threading.Thread(target=start_bot, daemon=True).start()
    uvicorn.run(app, host="0.0.0.0", port=8000)