from fastapi import FastAPI, Request
import os
import telebot
import logging
import json
import time
from datetime import datetime, timedelta
from typing import Dict, Set
from collections import defaultdict
from ved_database import VEDDatabase
from ved_router import route_message, handle_ai_analysis

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å —Ä–æ—Ç–∞—Ü–∏–µ–π
from logging.handlers import RotatingFileHandler

logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        RotatingFileHandler('ved_bot.log', maxBytes=10*1024*1024, backupCount=5),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger("VED_BOT")

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
WEBHOOK_URL = "https://vedexpert-production.up.railway.app/webhook"
ADMIN_IDS = [181780572]  # ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤

if not BOT_TOKEN:
    logger.error("‚ùå BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω!")
    exit(1)

bot = telebot.TeleBot(BOT_TOKEN)
app = FastAPI()

# –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞
class BotStats:
    def __init__(self):
        self.start_time = datetime.now()
        self.users: Set[int] = set()
        self.requests_count = 0
        self.popular_codes: Dict[str, int] = defaultdict(int)
        self.errors_count = 0
        self.ai_requests = 0
        
    def add_user(self, user_id: int):
        self.users.add(user_id)
        
    def add_request(self, code: str = None):
        self.requests_count += 1
        if code:
            self.popular_codes[code] += 1
            
    def add_error(self):
        self.errors_count += 1
        
    def add_ai_request(self):
        self.ai_requests += 1
        
    def get_stats(self) -> Dict:
        uptime = datetime.now() - self.start_time
        return {
            "uptime": str(uptime).split('.')[0],
            "users_count": len(self.users),
            "requests_count": self.requests_count,
            "errors_count": self.errors_count,
            "ai_requests": self.ai_requests,
            "popular_codes": dict(sorted(self.popular_codes.items(), 
                                       key=lambda x: x[1], reverse=True)[:5])
        }

stats = BotStats()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
try:
    ved_db = VEDDatabase()
    logger.info("‚úÖ VEDDatabase –∑–∞–≥—Ä—É–∂–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
except Exception as e:
    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
    ved_db = None

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
@bot.message_handler(commands=['start'])
def send_welcome(message):
    try:
        stats.add_user(message.from_user.id)
        welcome_text = """
ü§ñ **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –í–≠–î –≠–∫—Å–ø–µ—Ä—Ç!**

–Ø –ø–æ–º–æ–≥—É –≤–∞–º —Å –∫–æ–¥–∞–º–∏ –¢–ù –í–≠–î, –ø–æ—à–ª–∏–Ω–∞–º–∏ –∏ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º–∏ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏.

üìã **–ß—Ç–æ —è —É–º–µ—é:**
‚Ä¢ –ü–æ–∏—Å–∫ –ø–æ –∫–æ–¥—É –¢–ù –í–≠–î (10 —Ü–∏—Ñ—Ä)
‚Ä¢ –ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é —Ç–æ–≤–∞—Ä–∞
‚Ä¢ –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ—à–ª–∏–Ω—ã –ø–æ —Å—Ç—Ä–∞–Ω–∞–º
‚Ä¢ –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
‚Ä¢ AI-–∞–Ω–∞–ª–∏–∑ (–∫–æ–º–∞–Ω–¥–∞: –∞–Ω–∞–ª–∏–∑ XXXXXXXXXX)

üí° **–ü—Ä–∏–º–µ—Ä—ã –∑–∞–ø—Ä–æ—Å–æ–≤:**
‚Ä¢ `8471300000` - –Ω–æ—É—Ç–±—É–∫–∏
‚Ä¢ `–Ω–æ—É—Ç–±—É–∫` - –ø–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
‚Ä¢ `–∞–Ω–∞–ª–∏–∑ 8471300000` - AI-–∞–Ω–∞–ª–∏–∑

üîç –ù–∞—á–Ω–∏—Ç–µ —Å –≤–≤–æ–¥–∞ –∫–æ–¥–∞ –¢–ù –í–≠–î –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞!
"""
        bot.reply_to(message, welcome_text, parse_mode='Markdown')
        logger.info(f"üëã –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {message.from_user.id}")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ /start: {e}")
        bot.reply_to(message, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@bot.message_handler(commands=['help'])
def send_help(message):
    try:
        stats.add_user(message.from_user.id)
        help_text = """
üìñ **–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é:**

üîç **–ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–∞:**
‚Ä¢ –í–≤–µ–¥–∏—Ç–µ 10-–∑–Ω–∞—á–Ω—ã–π –∫–æ–¥ –¢–ù –í–≠–î: `8471300000`
‚Ä¢ –ò–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞: `–Ω–æ—É—Ç–±—É–∫`, `—Å–º–∞—Ä—Ç—Ñ–æ–Ω`, `–∫–æ—Ñ–µ`

üß† **AI-–∞–Ω–∞–ª–∏–∑:**
‚Ä¢ `–∞–Ω–∞–ª–∏–∑ 8471300000` - –ø–æ–ª—É—á–∏—Ç—å —ç–∫—Å–ø–µ—Ä—Ç–Ω–æ–µ –º–Ω–µ–Ω–∏–µ

üìä **–ö–æ–º–∞–Ω–¥—ã:**
‚Ä¢ `/start` - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É
‚Ä¢ `/help` - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞
‚Ä¢ `/stats` - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (–¥–ª—è –∞–¥–º–∏–Ω–æ–≤)

üí∞ **–ß—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è:**
‚Ä¢ –ü–æ—à–ª–∏–Ω—ã –ø–æ —Å—Ç—Ä–∞–Ω–∞–º (–†–æ—Å—Å–∏—è, –ö–∏—Ç–∞–π, –ï–°, –°–®–ê)
‚Ä¢ –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ (–¢–† –¢–°, –°–≠–°)
‚Ä¢ –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –∏ –ª–∏—Ü–µ–Ω–∑–∏–∏

‚ùì **–ü—Ä–æ–±–ª–µ–º—ã?** –ù–∞–ø–∏—à–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.
"""
        bot.reply_to(message, help_text, parse_mode='Markdown')
        logger.info(f"‚ùì –ó–∞–ø—Ä–æ—Å —Å–ø—Ä–∞–≤–∫–∏ –æ—Ç: {message.from_user.id}")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ /help: {e}")
        bot.reply_to(message, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@bot.message_handler(commands=['stats'])
def send_stats(message):
    try:
        if message.from_user.id not in ADMIN_IDS:
            bot.reply_to(message, "‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
            return
            
        bot_stats = stats.get_stats()
        stats_text = f"""
üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:**

‚è±Ô∏è **–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã:** {bot_stats['uptime']}
üë• **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:** {bot_stats['users_count']}
üìù **–ó–∞–ø—Ä–æ—Å–æ–≤:** {bot_stats['requests_count']}
ü§ñ **AI-–∑–∞–ø—Ä–æ—Å–æ–≤:** {bot_stats['ai_requests']}
‚ùå **–û—à–∏–±–æ–∫:** {bot_stats['errors_count']}

üî• **–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –∫–æ–¥—ã:**
"""
        for code, count in bot_stats['popular_codes'].items():
            stats_text += f"‚Ä¢ `{code}`: {count} —Ä–∞–∑\n"
            
        bot.reply_to(message, stats_text, parse_mode='Markdown')
        logger.info(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–ø—Ä–æ—à–µ–Ω–∞: {message.from_user.id}")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ /stats: {e}")
        bot.reply_to(message, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# –û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
@bot.message_handler(func=lambda message: True)
def handle_message(message):
    start_time = time.time()
    try:
        stats.add_user(message.from_user.id)
        user_text = message.text.strip()
        
        logger.info(f"üì© –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {message.from_user.id}: {user_text}")
        
        if not ved_db:
            bot.reply_to(message, "‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
            return
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ AI-–∞–Ω–∞–ª–∏–∑
        if "–∞–Ω–∞–ª–∏–∑" in user_text.lower():
            stats.add_ai_request()
            response = handle_ai_analysis(user_text, ved_db)
            if response:
                bot.reply_to(message, response, parse_mode='Markdown')
                return
        
        # –û–±—ã—á–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
        response = route_message(user_text, ved_db)
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–¥ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        import re
        code_match = re.search(r'\b\d{10}\b', user_text)
        if code_match:
            stats.add_request(code_match.group())
        else:
            stats.add_request()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
        bot.reply_to(message, response, parse_mode='Markdown')
        
        # –õ–æ–≥–∏—Ä—É–µ–º –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
        process_time = time.time() - start_time
        logger.info(f"‚è±Ô∏è –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–Ω—è–ª–∞: {process_time:.2f}—Å")
        
    except Exception as e:
        stats.add_error()
        error_msg = f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç {message.from_user.id}: {e}")
        
        try:
            bot.reply_to(message, error_msg)
        except:
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ")

# Webhook handler
@app.post("/webhook")
async def webhook(request: Request):
    try:
        json_data = await request.json()
        logger.debug(f"üõ∞Ô∏è Webhook –ø–æ–ª—É—á–µ–Ω")
        update = telebot.types.Update.de_json(json_data)
        bot.process_new_updates([update])
        return {"status": "ok"}
    except Exception as e:
        stats.add_error()
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ webhook: {e}")
        return {"status": "error"}

# Health check endpoint
@app.get("/health")
async def health_check():
    try:
        bot_stats = stats.get_stats()
        return {
            "status": "ok",
            "database": "connected" if ved_db else "disconnected",
            "stats": bot_stats
        }
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ health check: {e}")
        return {"status": "error"}

# –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ API –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
@app.get("/api/stats")
async def api_stats():
    try:
        return stats.get_stats()
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ API —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        return {"error": "Stats unavailable"}

if __name__ == "__main__":
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ –í–≠–î –≠–∫—Å–ø–µ—Ä—Ç –±–æ—Ç–∞...")
    logger.info(f"üìä –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {'‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∞' if ved_db else '‚ùå –ù–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞'}")
    
    import uvicorn
    uvicorn.run(
        app, 
        host="0.0.0.0", 
        port=int(os.environ.get("PORT", 8000)),
        log_level="info"
    )