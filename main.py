from fastapi import FastAPI
from wed_expert_genspark_integration import GensparktWEDAgent, ProductClassification
import threading
import os
import telebot
from ved_router import route_message
import re

# FastAPI
app = FastAPI(title="WED Expert API")
genspark_agent = GensparktWEDAgent()

# Telegram Bot
BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
bot = telebot.TeleBot(BOT_TOKEN)

@app.get("/")
def root():
    return {"message": "WED Expert + Genspark API —Ä–∞–±–æ—Ç–∞–µ—Ç!"}

@app.post("/api/genspark/classify")
async def classify_with_genspark(
    name: str,
    material: str,
    function: str,
    origin_country: str,
    value: float
):
    try:
        product = ProductClassification(
            name=name, material=material, function=function,
            processing_level="–≥–æ—Ç–æ–≤–æ–µ –∏–∑–¥–µ–ª–∏–µ",
            origin_country=origin_country, value=value
        )
        
        result = genspark_agent.determine_tn_ved(product)
        cost_calc = genspark_agent.calculate_total_cost(result, value)
        
        return {
            "success": True,
            "tn_ved_code": result.code,
            "description": result.description,
            "confidence": f"{result.confidence*100:.1f}%",
            "total_cost": cost_calc['total_cost'],
            "duty_amount": cost_calc['duty_amount'],
            "vat_amount": cost_calc['vat_amount'],
            "customs_fee": cost_calc['customs_fee'],
            "broker_fee": cost_calc['broker_fee'],
            "breakdown": cost_calc['breakdown'],
            "requirements": result.requirements
        }
    except Exception as e:
        return {"success": False, "error": str(e)}

@app.post("/api/genspark/validate")
async def validate_tn_ved(
    name: str,
    material: str,
    function: str,
    origin_country: str,
    value: float,
    suggested_code: str
):
    try:
        product = ProductClassification(
            name=name, material=material, function=function,
            processing_level="–≥–æ—Ç–æ–≤–æ–µ –∏–∑–¥–µ–ª–∏–µ",
            origin_country=origin_country, value=value
        )
        
        validation = genspark_agent.validate_classification(product, suggested_code)
        
        return {
            "success": True,
            "validation": validation
        }
    except Exception as e:
        return {"success": False, "error": str(e)}

# –£–ª—É—á—à–µ–Ω–Ω—ã–π –ø–∞—Ä—Å–µ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
class SmartQueryParser:
    """–£–º–Ω—ã–π –ø–∞—Ä—Å–µ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤"""
    
    def __init__(self):
        self.country_codes = {
            '–∫–∏—Ç–∞–π': 'CN', '–∫–∏—Ç–∞—è': 'CN', 'china': 'CN',
            '–≥–µ—Ä–º–∞–Ω–∏—è': 'DE', '–≥–µ—Ä–º–∞–Ω–∏–∏': 'DE', 'germany': 'DE',
            '–∏—Ç–∞–ª–∏—è': 'IT', '–∏—Ç–∞–ª–∏–∏': 'IT', 'italy': 'IT',
            '—Å—à–∞': 'US', '–∞–º–µ—Ä–∏–∫–∞': 'US', 'usa': 'US',
            '—è–ø–æ–Ω–∏—è': 'JP', '—è–ø–æ–Ω–∏–∏': 'JP', 'japan': 'JP',
            '–∫–æ—Ä–µ—è': 'KR', '–∫–æ—Ä–µ–∏': 'KR', 'korea': 'KR',
            '—Ñ—Ä–∞–Ω—Ü–∏—è': 'FR', '—Ñ—Ä–∞–Ω—Ü–∏–∏': 'FR', 'france': 'FR',
            '—Ç—É—Ä—Ü–∏—è': 'TR', '—Ç—É—Ä—Ü–∏–∏': 'TR', 'turkey': 'TR'
        }
        
        self.default_values = {
            '–∫–æ—Ñ–µ–º–∞—à–∏–Ω–∞': {'material': '–º–µ—Ç–∞–ª–ª, –ø–ª–∞—Å—Ç–∏–∫', 'function': '–ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ –∫–æ—Ñ–µ', 'value': 25000},
            '—Ç–µ–ª–µ—Ñ–æ–Ω': {'material': '–∞–ª—é–º–∏–Ω–∏–π, —Å—Ç–µ–∫–ª–æ', 'function': '–º–æ–±–∏–ª—å–Ω–∞—è —Å–≤—è–∑—å', 'value': 120000},
            '—Å–º–∞—Ä—Ç—Ñ–æ–Ω': {'material': '–∞–ª—é–º–∏–Ω–∏–π, —Å—Ç–µ–∫–ª–æ', 'function': '–º–æ–±–∏–ª—å–Ω–∞—è —Å–≤—è–∑—å', 'value': 120000},
            '–∫—É—Ä—Ç–∫–∞': {'material': '–ø–æ–ª–∏—ç—Å—Ç–µ—Ä, —Å–∏–Ω—Ç–µ–ø–æ–Ω', 'function': '–∑–∞—â–∏—Ç–∞ –æ—Ç —Ö–æ–ª–æ–¥–∞', 'value': 8000},
            '–Ω–æ—É—Ç–±—É–∫': {'material': '–ø–ª–∞—Å—Ç–∏–∫, –º–µ—Ç–∞–ª–ª', 'function': '–≤—ã—á–∏—Å–ª–µ–Ω–∏—è', 'value': 80000},
            '—á–∞—Å—ã': {'material': '–º–µ—Ç–∞–ª–ª, —Å—Ç–µ–∫–ª–æ', 'function': '–ø–æ–∫–∞–∑ –≤—Ä–µ–º–µ–Ω–∏', 'value': 15000},
            '–∫–Ω–∏–≥–∞': {'material': '–±—É–º–∞–≥–∞', 'function': '—á—Ç–µ–Ω–∏–µ', 'value': 1000},
            '—à–æ–∫–æ–ª–∞–¥': {'material': '–∫–∞–∫–∞–æ, —Å–∞—Ö–∞—Ä', 'function': '–ø–∏—Ç–∞–Ω–∏–µ', 'value': 500}
        }
    
    def parse_query(self, text):
        """–ü–∞—Ä—Å–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∑–∞–ø—Ä–æ—Å –∏ –∏–∑–≤–ª–µ–∫–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ"""
        text_lower = text.lower()
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
        product_name = self._extract_product_name(text_lower)
        if not product_name:
            return None
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å—Ç—Ä–∞–Ω—É –ø—Ä–æ–∏—Å—Ö–æ–∂–¥–µ–Ω–∏—è
        country = self._extract_country(text_lower)
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å
        value = self._extract_value(text)
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è —Ç–æ–≤–∞—Ä–∞
        defaults = self._get_defaults(product_name)
        
        return ProductClassification(
            name=product_name,
            material=defaults['material'],
            function=defaults['function'],
            processing_level="–≥–æ—Ç–æ–≤–æ–µ –∏–∑–¥–µ–ª–∏–µ",
            origin_country=country,
            value=value or defaults['value']
        )
    
    def _extract_product_name(self, text):
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –∏–∑ —Ç–µ–∫—Å—Ç–∞"""
        for product in self.default_values.keys():
            if product in text:
                return product
        
        # –ü–æ–∏—Å–∫ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
        keywords = {
            'iphone': '—Å–º–∞—Ä—Ç—Ñ–æ–Ω',
            'samsung': '—Å–º–∞—Ä—Ç—Ñ–æ–Ω',
            'macbook': '–Ω–æ—É—Ç–±—É–∫',
            'lenovo': '–Ω–æ—É—Ç–±—É–∫',
            'delonghi': '–∫–æ—Ñ–µ–º–∞—à–∏–Ω–∞',
            'rolex': '—á–∞—Å—ã',
            'adidas': '–∫—É—Ä—Ç–∫–∞'
        }
        
        for keyword, product in keywords.items():
            if keyword in text:
                return product
        
        return None
    
    def _extract_country(self, text):
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Å—Ç—Ä–∞–Ω—É –ø—Ä–æ–∏—Å—Ö–æ–∂–¥–µ–Ω–∏—è"""
        for country_name, code in self.country_codes.items():
            if country_name in text:
                return code
        return 'CN'  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –ö–∏—Ç–∞–π
    
    def _extract_value(self, text):
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç—å –∏–∑ —Ç–µ–∫—Å—Ç–∞"""
        # –ò—â–µ–º —á–∏—Å–ª–∞ —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –≤–∞–ª—é—Ç—ã
        patterns = [
            r'(\d+(?:\s?\d{3})*)\s*(?:—Ä—É–±|—Ä—É–±–ª–µ–π?)',
            r'(\d+(?:\s?\d{3})*)\s*(?:–¥–æ–ª–ª–∞—Ä–æ–≤?|usd|\$)',
            r'(\d+(?:\s?\d{3})*)\s*(?:–µ–≤—Ä–æ|eur|‚Ç¨)',
            r'(\d+(?:\s?\d{3})*)\s*(?:—é–∞–Ω–µ–π?|yuan|¬•)'
        ]
        
        for pattern in patterns:
            match = re.search(pattern, text.lower())
            if match:
                value_str = match.group(1).replace(' ', '')
                return float(value_str)
        
        return None
    
    def _get_defaults(self, product_name):
        """–ü–æ–ª—É—á–∞–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è —Ç–æ–≤–∞—Ä–∞"""
        return self.default_values.get(product_name, {
            'material': '—Ä–∞–∑–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã',
            'function': '–±—ã—Ç–æ–≤–æ–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ',
            'value': 10000
        })

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–∞—Ä—Å–µ—Ä
query_parser = SmartQueryParser()

# –£–ª—É—á—à–µ–Ω–Ω—ã–µ Bot handlers
@bot.message_handler(commands=['start'])
def send_welcome(message):
    welcome_text = """üëã –ü—Ä–∏–≤–µ—Ç! –Ø WED Expert —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π Genspark AI!

üéØ –ß—Ç–æ —è —É–º–µ—é:
‚Ä¢ –ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–≤–∞—Ä—ã –ø–æ –¢–ù –í–≠–î
‚Ä¢ –†–∞—Å—Å—á–∏—Ç—ã–≤–∞—Ç—å –ø–æ—à–ª–∏–Ω—ã –∏ –Ω–∞–ª–æ–≥–∏
‚Ä¢ –û–ø—Ä–µ–¥–µ–ª—è—Ç—å —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞

üìù –ü—Ä–∏–º–µ—Ä—ã –∑–∞–ø—Ä–æ—Å–æ–≤:
"–•–æ—á—É –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–æ—Ñ–µ–º–∞—à–∏–Ω—É –∏–∑ –ò—Ç–∞–ª–∏–∏ –∑–∞ 25000 —Ä—É–±–ª–µ–π"
"–¢–µ–ª–µ—Ñ–æ–Ω iPhone –∏–∑ –ö–∏—Ç–∞—è"
"–ö—É—Ä—Ç–∫–∞ –∑–∏–º–Ω—è—è –∏–∑ –¢—É—Ä—Ü–∏–∏"

üí° –ü—Ä–æ—Å—Ç–æ –æ–ø–∏—à–∏—Ç–µ —Ç–æ–≤–∞—Ä –∏ —è –≤—Å—ë –ø–æ—Å—á–∏—Ç–∞—é!"""
    
    bot.reply_to(message, welcome_text)

@bot.message_handler(commands=['help'])
def send_help(message):
    help_text = """‚ùì –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è WED Expert:

1Ô∏è‚É£ –û–ø–∏—à–∏—Ç–µ —Ç–æ–≤–∞—Ä –ø—Ä–æ—Å—Ç—ã–º–∏ —Å–ª–æ–≤–∞–º–∏
2Ô∏è‚É£ –£–∫–∞–∂–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É –ø—Ä–æ–∏—Å—Ö–æ–∂–¥–µ–Ω–∏—è
3Ô∏è‚É£ –î–æ–±–∞–≤—å—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å (–ø–æ –∂–µ–ª–∞–Ω–∏—é)

üîç –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ç–æ–≤–∞—Ä—ã:
üì± –≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞: —Ç–µ–ª–µ—Ñ–æ–Ω—ã, –Ω–æ—É—Ç–±—É–∫–∏, –ø–ª–∞–Ω—à–µ—Ç—ã
‚òï –ë—ã—Ç–æ–≤–∞—è —Ç–µ—Ö–Ω–∏–∫–∞: –∫–æ—Ñ–µ–º–∞—à–∏–Ω—ã, —á–∞–π–Ω–∏–∫–∏
üëï –û–¥–µ–∂–¥–∞: –∫—É—Ä—Ç–∫–∏, –ø–∞–ª—å—Ç–æ, –∫–æ—Å—Ç—é–º—ã
üëü –û–±—É–≤—å: –∫—Ä–æ—Å—Å–æ–≤–∫–∏, –±–æ—Ç–∏–Ω–∫–∏, —Ç—É—Ñ–ª–∏
üöó –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç: –∞–≤—Ç–æ–º–æ–±–∏–ª–∏, –≤–µ–ª–æ—Å–∏–ø–µ–¥—ã
üíÑ –ö–æ—Å–º–µ—Ç–∏–∫–∞: –∫—Ä–µ–º—ã, –ø–∞—Ä—Ñ—é–º, —à–∞–º–ø—É–Ω–∏
üìö –ö–Ω–∏–≥–∏ –∏ –∂—É—Ä–Ω–∞–ª—ã
üç´ –ü—Ä–æ–¥—É–∫—Ç—ã –ø–∏—Ç–∞–Ω–∏—è
üç∑ –ê–ª–∫–æ–≥–æ–ª—å–Ω—ã–µ –Ω–∞–ø–∏—Ç–∫–∏
ü™ë –ú–µ–±–µ–ª—å

‚ö° Powered by Genspark AI"""
    
    bot.reply_to(message, help_text)

@bot.message_handler(func=lambda message: True)
def handle_messages(message):
    try:
        text = message.text
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–µ–º –ª–∏ —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –∫–∞–∫ —Ç–æ–≤–∞—Ä
        product = query_parser.parse_query(text)
        
        if product:
            # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç Genspark
            result = genspark_agent.determine_tn_ved(product)
            cost_calc = genspark_agent.calculate_total_cost(result, product.value)
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
            response = f"""ü§ñ **–ê–Ω–∞–ª–∏–∑ Genspark AI**

üì¶ **–¢–æ–≤–∞—Ä:** {product.name.title()}
üåç **–°—Ç—Ä–∞–Ω–∞:** {product.origin_country}
üí∞ **–°—Ç–æ–∏–º–æ—Å—Ç—å:** {product.value:,.0f} —Ä—É–±

üéØ **–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –¢–ù –í–≠–î:**
‚Ä¢ –ö–æ–¥: `{result.code}`
‚Ä¢ –û–ø–∏—Å–∞–Ω–∏–µ: {result.description}
‚Ä¢ –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {result.confidence*100:.0f}%

üíµ **–†–∞—Å—á—ë—Ç –ø–ª–∞—Ç–µ–∂–µ–π:**
‚Ä¢ –¢–æ–≤–∞—Ä–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {cost_calc['customs_value']:,.0f} —Ä—É–±
‚Ä¢ –ü–æ—à–ª–∏–Ω–∞ ({result.duty_rate}): {cost_calc['duty_amount']:,.0f} —Ä—É–±
‚Ä¢ –ù–î–° ({result.vat_rate}): {cost_calc['vat_amount']:,.0f} —Ä—É–±
‚Ä¢ –¢–∞–º–æ–∂–µ–Ω–Ω—ã–π —Å–±–æ—Ä: {cost_calc['customs_fee']:,.0f} —Ä—É–±
‚Ä¢ –ë—Ä–æ–∫–µ—Ä—Å–∫–∏–µ —É—Å–ª—É–≥–∏: {cost_calc['broker_fee']:,.0f} —Ä—É–±

üí∏ **–ò—Ç–æ–≥–æ –∫ –¥–æ–ø–ª–∞—Ç–µ: {cost_calc['total_taxes'] + cost_calc['total_fees']:,.0f} —Ä—É–±**
üèÜ **–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {cost_calc['total_cost']:,.0f} —Ä—É–±**

üìã **–û—Å–Ω–æ–≤–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è:**
{chr(10).join(['‚Ä¢ ' + req for req in result.requirements[:4]])}

‚ö° *Powered by Genspark AI*"""
            
            bot.reply_to(message, response, parse_mode='Markdown')
            
        else:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω—É—é RAG —Å–∏—Å—Ç–µ–º—É
            response = route_message(text)
            bot.reply_to(message, response)
            
    except Exception as e:
        error_text = f"""‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}

üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ:
‚Ä¢ –û–ø–∏—Å–∞—Ç—å —Ç–æ–≤–∞—Ä –ø—Ä–æ—â–µ: "—Ç–µ–ª–µ—Ñ–æ–Ω –∏–∑ –ö–∏—Ç–∞—è"
‚Ä¢ –£–∫–∞–∑–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É /help –¥–ª—è –ø—Ä–∏–º–µ—Ä–æ–≤"""
        
        bot.reply_to(message, error_text)

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
def start_bot():
    bot.infinity_polling()

if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –≤ —Ñ–æ–Ω–µ
    bot_thread = threading.Thread(target=start_bot, daemon=True)
    bot_thread.start()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º FastAPI
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=int(os.getenv("PORT", 8000)))