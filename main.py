from fastapi import FastAPI, Request
import os
import telebot
import logging
import json
from wed_expert_genspark_integration import GensparktWEDAgent
from enhanced_ved_system import EnhancedVEDExpertSystem

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger('VEDBot')

# FastAPI
app = FastAPI(title="WED Expert API Enhanced")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã
genspark_agent = GensparktWEDAgent()
ved_system = EnhancedVEDExpertSystem(genspark_agent)

# Telegram Bot
BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
WEBHOOK_URL = "https://vedexpert-production.up.railway.app/webhook"

if not BOT_TOKEN:
    logger.error("BOT_TOKEN not found!")
    exit(1)

bot = telebot.TeleBot(BOT_TOKEN)

@bot.message_handler(commands=['start', 'help'])
def send_welcome(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥ start –∏ help"""
    welcome_text = """–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –í–≠–î –≠–∫—Å–ø–µ—Ä—Ç 2.0! üöÄ

üéØ **–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:**
‚Ä¢ –£–º–Ω—ã–π –ø–æ–∏—Å–∫ –ø–æ –∫–æ–¥–∞–º –¢–ù –í–≠–î (10 —Ü–∏—Ñ—Ä)
‚Ä¢ –ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é —Ç–æ–≤–∞—Ä–∞ —Å —Å–∏–Ω–æ–Ω–∏–º–∞–º–∏
‚Ä¢ –≠–∫—Å–ø–µ—Ä—Ç–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —á–µ—Ä–µ–∑ –ò–ò
‚Ä¢ –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –±—ã—Å—Ç—Ä—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤

üìù **–ö–æ–º–∞–Ω–¥—ã:**
/start - —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
/help - —Å–ø—Ä–∞–≤–∫–∞
/stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã

üí° **–ü—Ä–∏–º–µ—Ä—ã –∑–∞–ø—Ä–æ—Å–æ–≤:**
‚Ä¢ 8471300000
‚Ä¢ –Ω–æ—É—Ç–±—É–∫ (–Ω–∞–π–¥–µ—Ç –Ω–æ—É—Ç–±—É–∫–∏, –ª—ç–ø—Ç–æ–ø—ã, laptop)
‚Ä¢ —Å–≤–∏–Ω–∏–Ω–∞ –∑–∞–º–æ—Ä–æ–∂–µ–Ω–Ω–∞—è
‚Ä¢ genspark –∞–Ω–∞–ª–∏–∑ –∫–æ—Ñ–µ–º–∞—à–∏–Ω—ã

–ü—Ä–æ—Å—Ç–æ –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –∏–ª–∏ –∫–æ–¥!"""
    
    try:
        bot.reply_to(message, welcome_text)
        logger.info(f"Welcome sent to user {message.from_user.id}")
    except Exception as e:
        logger.error(f"Error sending welcome: {e}")

@bot.message_handler(commands=['stats'])
def send_stats(message):
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã"""
    try:
        cache_stats = ved_system.database.cache.stats if hasattr(ved_system.database, 'cache') else {}
        
        stats_text = f"""üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –í–≠–î –≠–∫—Å–ø–µ—Ä—Ç 2.0:**

üíæ **–ö—ç—à:**
‚Ä¢ –ü–æ–ø–∞–¥–∞–Ω–∏–π: {cache_stats.get('hits', 0)}
‚Ä¢ –ü—Ä–æ–º–∞—Ö–æ–≤: {cache_stats.get('misses', 0)}

üìö **–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö:**
‚Ä¢ –¢–æ–≤–∞—Ä–æ–≤ –≤ –±–∞–∑–µ: {len(ved_system.database.database.get('codes', []))}
‚Ä¢ –ì—Ä—É–ø–ø —Ç–æ–≤–∞—Ä–æ–≤: {len(ved_system.database.database.get('groups', []))}

üîç **–ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø—Ä–æ—Å—ã –∫—ç—à–∏—Ä–æ–≤–∞–Ω—ã**"""
        
        bot.reply_to(message, stats_text)
        logger.info(f"Stats sent to user {message.from_user.id}")
    except Exception as e:
        logger.error(f"Error sending stats: {e}")
        bot.reply_to(message, "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")

@bot.message_handler(func=lambda message: True)
def handle_all_messages(message):
    """–ì–õ–ê–í–ù–´–ô –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç EnhancedVEDExpertSystem"""
    try:
        user_input = message.text
        user_id = message.from_user.id
        
        logger.info(f"–ó–∞–ø—Ä–æ—Å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {user_input[:50]}...")
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –£–ú–ù–£–Æ —Å–∏—Å—Ç–µ–º—É –≤–º–µ—Å—Ç–æ –ø—Ä–æ—Å—Ç–æ–π
        response = ved_system.process_query(user_input)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
        bot.reply_to(message, response, parse_mode="Markdown")
        logger.info(f"–û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        try:
            error_response = "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
            bot.reply_to(message, error_response)
        except:
            logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ")

@app.get("/")
def read_root():
    return {
        "status": "running", 
        "service": "WED Expert API Enhanced v2.0",
        "mode": "webhook",
        "system": "EnhancedVEDExpertSystem"
    }

@app.get("/stats")
def api_stats():
    """API –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    try:
        cache_stats = ved_system.database.cache.stats if hasattr(ved_system.database, 'cache') else {}
        
        return {
            "cache_stats": cache_stats,
            "database_codes": len(ved_system.database.database.get('codes', [])),
            "database_groups": len(ved_system.database.database.get('groups', [])),
            "system_type": "EnhancedVEDExpertSystem"
        }
    except Exception as e:
        return {"error": str(e)}

@app.post("/webhook")
async def webhook(request: Request):
    """Webhook –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç Telegram"""
    try:
        json_data = await request.json()
        update = telebot.types.Update.de_json(json_data)
        bot.process_new_updates([update])
        return {"status": "ok"}
    except Exception as e:
        logger.error(f"Webhook error: {e}")
        return {"status": "error", "message": str(e)}

@app.get("/set_webhook")
def set_webhook():
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ webhook"""
    try:
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π webhook
        bot.remove_webhook()
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–π
        result = bot.set_webhook(url=WEBHOOK_URL)
        
        if result:
            logger.info(f"Webhook set successfully: {WEBHOOK_URL}")
            return {"status": "webhook set", "url": WEBHOOK_URL}
        else:
            logger.error("Failed to set webhook")
            return {"status": "error", "message": "Failed to set webhook"}
            
    except Exception as e:
        logger.error(f"Error setting webhook: {e}")
        return {"status": "error", "message": str(e)}

@app.get("/webhook_info")
def webhook_info():
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ webhook"""
    try:
        info = bot.get_webhook_info()
        return {
            "url": info.url,
            "has_custom_certificate": info.has_custom_certificate,
            "pending_update_count": info.pending_update_count,
            "last_error_date": info.last_error_date,
            "last_error_message": info.last_error_message,
            "max_connections": info.max_connections,
            "allowed_updates": info.allowed_updates
        }
    except Exception as e:
        logger.error(f"Error getting webhook info: {e}")
        return {"status": "error", "message": str(e)}

@app.on_event("startup")
async def startup():
    """Startup event - —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º webhook"""
    logger.info("Starting Enhanced VED Expert System with webhook...")
    try:
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π webhook
        bot.remove_webhook()
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–π webhook
        result = bot.set_webhook(url=WEBHOOK_URL)
        
        if result:
            logger.info(f"‚úÖ Webhook set successfully: {WEBHOOK_URL}")
            logger.info("‚úÖ Enhanced VED Expert System ready!")
        else:
            logger.error("‚ùå Failed to set webhook")
            
    except Exception as e:
        logger.error(f"‚ùå Error in startup: {e}")

if __name__ == "__main__":
    import uvicorn
    logger.info("Starting in standalone mode with Enhanced VED System...")
    uvicorn.run(app, host="0.0.0.0", port=8000)